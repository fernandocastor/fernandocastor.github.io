<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fernando Castor</title>
    <description>The opinions expressed here are the sole responsibility of the author.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 04 Jun 2023 16:58:20 +0200</pubDate>
    <lastBuildDate>Sun, 04 Jun 2023 16:58:20 +0200</lastBuildDate>
    <generator>Jekyll v4.3.2</generator>
    
      <item>
        <title>A Tipsy, Unscientific, and Biased Survey on the Adoption of Refactoring Tools Available in IDEs by Software Engineering Researchers</title>
        <description>&lt;p&gt;Last Friday I participated in my first &lt;a href=&quot;https://www.sen-symposium.nl/&quot;&gt;SEN symposium&lt;/a&gt;, which gathers Software Engineering researchers from all across the Netherlands. I was one of the organizers, together with &lt;a href=&quot;https://www.gemmacatolino.com/&quot;&gt;Gemma Catalino&lt;/a&gt;, &lt;a href=&quot;https://sjunges.github.io/&quot;&gt;Sebastian Junges&lt;/a&gt;, &lt;a href=&quot;https://www.cwi.nl/en/people/jurgen-vinju/&quot;&gt;Jurgen Vinju&lt;/a&gt;, &lt;a href=&quot;https://www.rug.nl/staff/t.van.der.storm/&quot;&gt;Tijs van der Storm&lt;/a&gt;, and &lt;a href=&quot;https://www.uu.nl/staff/NSAlizadeh&quot;&gt;Negar Alizadeh&lt;/a&gt;. The symposium had &lt;a href=&quot;https://www.sen-symposium.nl/speakers/&quot;&gt;two keynotes and three invited speakers&lt;/a&gt; in diverse topics such as refactoring, code comprehension, security, academic (and industry) career, and modeling and construction of robots, in addition to a dozen lightning talks. I really enjoyed the experience; I found the community very welcoming and interested in discussing diverse research topics.&lt;/p&gt;

&lt;p&gt;After the symposium there was a reception with some drinks that was attended by quite a few participants. In that reception I talked to one of the invited speakers, &lt;a href=&quot;https://binlin.info/&quot;&gt;Bin Lin&lt;/a&gt;, who gave a very interesting presentation on the landscape of research on refactoring. During the conversation, we discussed the abundance of research on this topic and the apparent contradiction that developers don’t think too much about it. They do perform refactoring, but usually as part of some other software development activity that takes the front stage. In particular I was under the impression that developers don’t care too much about the automated refactoring functionality that contemporary IDEs make available, e.g., the &lt;em&gt;“Refactor”&lt;/em&gt; menu is tools such as Eclipse and VS Code. He agreed with me, which somewhat surprised me since he is a very active researcher in this area. This then prompted me to ask him whether he employs any automated refactoring tools in his day-to-day coding activities, to which he responded that no, he doesn’t.&lt;/p&gt;

&lt;p&gt;Personally I have been using automated refactoring tools for more than 20 years, at least for statically typed languages. I started in 2001, when Martin Fowler wrote an article called &lt;a href=&quot;https://martinfowler.com/articles/refactoringRubicon.html&quot;&gt;&lt;em&gt;“Crossing Refactoring’s Rubicon”&lt;/em&gt;&lt;/a&gt;. It describes two tools, X-ref and jFactor. At the time I was working with program transformations and particularly interested in describing refectories in a generalized manner. Motivated by that, I ran some tests with jFactor to study how well it preserved behavior and noticed that it committed some mistakes with corner cases, although it worked fine most of the time. Nowadays, when writing Java or Swift code, I often employ automated refactoring although, for dynamically typed languages, I don’t trust the tools very much because there is so little information available for them to guarantee behavior preservation.&lt;/p&gt;

&lt;h3 id=&quot;an-ad-hoc-survey&quot;&gt;An ad-hoc survey&lt;/h3&gt;

&lt;p&gt;Bin’s response surprised me and, after a couple of glasses of wine, my researcher curiosity got activated and I decided to gather a bit more data about whether it is a common viewpoint. My sample would be the completely biased group of people present in that reception, which consisted almost entirely of Software Engineering researchers, many of whom conducted work on refactoring (myself included). I talked to 33 people overall, asking them if they made use of refactorings such as renaming and method extraction made available by existing IDEs. I also asked them about languages in which they performed refactorings and which refactorings they used. The data was unreliably recorded by me on the note-taking app on my phone.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/fernandocastor/fernandocastor.github.io/master/images/ballmer_peak.png&quot; alt=&quot;Is there a Ballmer peak for research?&quot; /&gt;&lt;/p&gt;
&lt;font size=&quot;1&quot;&gt;CC-BY-NC, strip by Randall Munroe. https://xkcd.com/323/&lt;/font&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Out of the 33 individuals with whom I talked, 19 said unequivocally that they do not use automated refactoring, 13 do, and one stayed on the fence, i.e., they sometimes do but wouldn’t say they are regular users. Among the folks who use automated refactoring, 10 use only renaming. When asked about why, the reason &lt;strong&gt;all&lt;/strong&gt; of them raised is that &lt;strong&gt;they don’t trust the tools to perform other, more complicated refactorings&lt;/strong&gt;. The 19 who do not use these tools also do not trust them to guarantee behavior preservation. Furthermore, only a couple use automated refactoring in dynamically-typed languages (one for Python, the other for PHP). One of the respondents, a well-known researcher in the area of metaprogramming, gave me an elaborate answer about why they use refactoring for PHP (they know how the refactorings are implemented and thus that they mostly work) but not so much for Java (existing robust implementations are very inefficient and the efficient ones are unreliable). More specifically, existing implementations of automated refactoring fail to take concurrency and the particularities of the Java Memory Model into account. I also heard from a few (two or three) Software Engineering researchers who seem themselves more as data scientists than developers that they don’t care about code quality and therefore &lt;strong&gt;don’t care about refactoring at all&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A potential threat to the validity of this already completely unreliable survey is that researchers are not developers and don’t write a lot of code. That is potentially true, but in our sample most do, at least occasionally. Furthermore, some of the respondents actually do write code as one of their main activities, as they are affiliated with a research institute that provides service to many large companies.&lt;/p&gt;

&lt;h3 id=&quot;concluding-remarks&quot;&gt;Concluding remarks&lt;/h3&gt;

&lt;p&gt;Refactoring is a pretty popular research topic in our community. Every year it is possible to find some papers on the topic in conferences such as ICSE, FSE, SANER, ICSME, and ASE. There are papers on very diverse topics such as recommending refactorings [1,2], how developers use refactoring [3,4], what they think about refactoring [10], refactoring to improve quality attributes other than maintainability [2,6], code smells [5], and many more. When I was a young researcher, the implementation of refactoring was also a topic of great interest for researchers [7,8]. Nowadays, though, I think this topic has become less sexy and I don’t see a lot of papers trying to get refactoring working efficiently, as if the problem had already been solved. However, the results of this survey suggest that it hasn’t and and there is room for improvement. There is debate about whether the efficiency arguably promoted by refactoring tools is more important than behavior preservation or not [9]. I’d like to hear what researchers and developers think about this and, if behavior preservation is impossible to achieve in a generalized manner, whether there is an acceptable trade-off.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;p&gt;[1] Gabriele Bavota, Andrea De Lucia, Andrian Marcus, Rocco Oliveto: Recommending Refactoring Operations in Large Software Systems. Recommendation Systems in Software Engineering 2014: 387-419&lt;/p&gt;

&lt;p&gt;[2] Wellington Oliveira, Renato Oliveira, Fernando Castor, Gustavo Pinto, João Paulo Fernandes: Improving energy-efficiency by recommending Java collections. Empir. Softw. Eng. 26(3): 55 (2021)&lt;/p&gt;

&lt;p&gt;[3] Emerson R. Murphy-Hill, Chris Parnin, Andrew P. Black: How We Refactor, and How We Know It. IEEE Trans. Software Eng. 38(1): 5-18 (2012)&lt;/p&gt;

&lt;p&gt;[4] Jevgenija Pantiuchina, Bin Lin, Fiorella Zampetti, Massimiliano Di Penta, Michele Lanza, Gabriele Bavota: Why Do Developers Reject Refactorings in Open-Source Projects? ACM Trans. Softw. Eng. Methodol. 31(2): 23:1-23:23 (2022)&lt;/p&gt;

&lt;p&gt;[5] Willian Nalepa Oizumi, Alessandro F. Garcia, Leonardo da Silva Sousa, Bruno Barbieri Pontes Cafeo, Yixue Zhao:
Code anomalies flock together: exploring code anomaly agglomerations for locating design problems. ICSE 2016: 440-451&lt;/p&gt;

&lt;p&gt;[6] Yu Lin, Cosmin Radoi, Danny Dig: Retrofitting concurrency for Android applications through refactoring. SIGSOFT FSE 2014: 341-352&lt;/p&gt;

&lt;p&gt;[7] Don Roberts, John Brant, Ralph E. Johnson: A Refactoring Tool for Smalltalk. Theory Pract. Object Syst. 3(4): 253-263 (1997)&lt;/p&gt;

&lt;p&gt;[8] Hannes Kegel, Friedrich Steimann: Systematically refactoring inheritance to delegation in java. ICSE 2008: 431-440&lt;/p&gt;

&lt;p&gt;[9] John Brant, Friedrich Steimann: Refactoring Tools are Trustworthy Enough and Trust Must be Earned. IEEE Softw. 32(6): 80-83 (2015)&lt;/p&gt;

&lt;p&gt;[10] Miryung Kim, Thomas Zimmermann, Nachiappan Nagappan: An Empirical Study of RefactoringChallenges and Benefits at Microsoft. IEEE Trans. Software Eng. 40(7): 633-649 (2014)&lt;/p&gt;
</description>
        <pubDate>Sun, 04 Jun 2023 18:21:00 +0200</pubDate>
        <link>http://localhost:4000/research/2023/06/04/academics_and_refactoring.html</link>
        <guid isPermaLink="true">http://localhost:4000/research/2023/06/04/academics_and_refactoring.html</guid>
        
        
        <category>research</category>
        
      </item>
    
      <item>
        <title>Facilitating Discussion</title>
        <description>&lt;p&gt;This text is a summary of Chapter 5 of &lt;strong&gt;“&lt;a href=&quot;https://en.wikipedia.org/wiki/Wilbert_J._McKeachie&quot;&gt;McKeachie&lt;/a&gt;’s &lt;a href=&quot;https://www.cengage.uk/shop/isbn/9781133936794&quot;&gt;Teaching Tips&lt;/a&gt;“&lt;/strong&gt;. The title of the post is the title of the chapter.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Discussion&lt;/strong&gt; is the &lt;em&gt;“prototypic teaching method”&lt;/em&gt; to promote active learning. Discussion is easier to conduct in smaller classes but it can also happen in larger ones. Research shows that having to explain how one thinks is effective in clarifying that thinking and helping one to learn from it. Discussion is a typical way of promoting formative assessment; by discussing, students get a better grasp at what they do and don’t know.&lt;/p&gt;

&lt;p&gt;Teaching by discussion requires that instructors perform several tasks. They must help and students prepare for the discussion and get them to engage and keep engaged. They must also direct the discussion so that progress is made and discussion is kept civil and respectful. The class should feel like a safe place to express ideas.&lt;/p&gt;

&lt;p&gt;Students who are required to read some materials before a discussion may not do so. One approach to deal with this is to have a quiz in the beginning of the class. If answering the quiz requires them to study beforehand, they will feel more motivated. Alternatively, the instructor can talk to the students in an attempt to understand their motivation for not reading the materials and work out solutions based on their inputs.&lt;/p&gt;

&lt;h2 id=&quot;preparing-for-the-discussion&quot;&gt;Preparing for the discussion&lt;/h2&gt;

&lt;p&gt;Helping students prepare for the discussion involves giving them questions for reflection. These are typically &lt;strong&gt;how&lt;/strong&gt; and &lt;strong&gt;why&lt;/strong&gt; questions which lead to reflection. If possible, it is better to avoid &lt;strong&gt;what&lt;/strong&gt; questions because they usually require only recollection of information. Another approach to prepare students for discussion is to give them a quiz before class starts or at the beginning of class, prior to discussion. Yet another approach is to promote online discussions before class. In this case, it is particularly engaging if the instructor actually reads all the posts and brings examples to class. This makes the students feel like their work is valued.&lt;/p&gt;

&lt;p&gt;Starting the discussion is important. If students prepared well, the discussion is likely to flow easily, but still require an initial &lt;em&gt;spark&lt;/em&gt;. This spark can come from a common experience, e.g., a very prominent current event or an experience all of them had. The latter can be stimulated by asking them to watch a short, engaging video. It is also possible to spark discussion by means of controversy, by presenting a problem, or, more commonly, by posing a question and allowing the students some time to think about it. There are many different kinds of questions that can be posed, e.g., interpretation questions, connection and causal effect questions, comparative and evaluative questions, and critical ones. Personally, I find connective questions super useful as a way to emphasize relationships between topics that are not obviously linked, e.g., testing and design patterns.&lt;/p&gt;

&lt;h2 id=&quot;conducting-the-discussion&quot;&gt;Conducting the discussion&lt;/h2&gt;

&lt;p&gt;Possibly the most important attitude an instructor can have during discussion is to listen actively and acknowledge students’ comments. Other tips for conducting discussion include establishing eye contact, smiling, calling students by name, sitting them in a circle, helping students take notes (&lt;strong&gt;it is not clear to me how this happens, though&lt;/strong&gt;), and using the viewpoints and reactions of students as input for the next comments. Finally, it is also useful to establish ground rules early on in the period and involve students in a preliminary discussion about these ground rules.&lt;/p&gt;

&lt;p&gt;The worst enemy of a discussion is a group of students who do not participate. This stems from a number of reasons and the book presents a nice list. It cites student habits of passivity, failure to see the value of discussion, fear of criticism or looking stupid, thinking that the instructor expects them to come up with a correct answer, instead of exploring possibilities, and directing students too soon towards a conclusion, without leaving room for them to analyze alternative viewpoints. Furthermore, students may have the feeling that, by engaging in discussion, they are not learning.&lt;/p&gt;

&lt;p&gt;In most discussions, a few students will do most of the talking with a large number remaining silent. This my stem from diverse reasons: shyness, boredom, lack of knowledge, and fear of embarrassment. Getting the students to know each other and the instructor can reduce some of these problems. If students feel they belong to the group or that their opinions are shared by at least one colleague, they will feel less resistant to the idea of manifesting themselves. Organizing them in subgroups (may be as small as two people) can improve that sense of belonging. An alternative is to ask students to spend a couple of minutes writing down their thoughts and asking them to express what they wrote. Furthermore, questions during the discussion should not be of the type that accepts a correct answer. Asking them “how does this look to you” or “how do you feel about this” is much less oppressive then asking them “what is the name of this phenomenon”.&lt;/p&gt;

&lt;p&gt;Later in the chapter, the author briefly comments on the effectiveness of student-led discussions. The latter tend to be more active, spark more controversy, and produce more curious students. Students feel freer to disagree in this kind of discussion and, as a consequence, potentially learn more.&lt;/p&gt;

&lt;h2 id=&quot;helping-students-to-learn-through-discussion&quot;&gt;Helping students to learn through discussion&lt;/h2&gt;

&lt;p&gt;The book presents a list of tips to help students to learn through discussion, as this is not something that will come naturally to everyone. This is a summary of these tips:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Students should understand the importance of the discussion for learning. It should be clear to them that expressing their ideas and actively listening to each other’s improves learning and knowledge retention.&lt;/li&gt;
  &lt;li&gt;Students should learn to listen to each other and not just attempt to refute. One technique suggested by the book is to ask students to, when replying to a comment made by fellow students, to repeat or paraphrase what they just said.&lt;/li&gt;
  &lt;li&gt;Planning the discussion so that it flows during class time. If it spills into after class time, that should happen in a way that is foreseen and planned for.&lt;/li&gt;
  &lt;li&gt;Having short discussions afterwards to reflect on the discussion that just happened, what worked well and what didn’t.&lt;/li&gt;
  &lt;li&gt;Helping with note taking is important. The notes to be taken in a discussion are  not linear. They may use a table with multiple columns, one for each viewpoint under discussion, or a mind map, to draw connections among the discussed issues.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To avoid the feeling that some students have of not learning as much through discussion as they would in a more traditional lecture, a couple of students can be assigned the role of note takers. In this manner, at the end of every discussion the students will have a summary of what was discussed that they can use as reference. An alternative is the one (or two or three) minute paper, where each one summarizes for themselves the main points of the discussion.&lt;/p&gt;
</description>
        <pubDate>Sat, 29 Jan 2022 17:05:00 +0100</pubDate>
        <link>http://localhost:4000/teaching/2022/01/29/discussions.html</link>
        <guid isPermaLink="true">http://localhost:4000/teaching/2022/01/29/discussions.html</guid>
        
        
        <category>teaching</category>
        
      </item>
    
      <item>
        <title>How to Make Lectures More Effective</title>
        <description>&lt;p&gt;This text is a summary of Chapter 6 of &lt;strong&gt;“&lt;a href=&quot;https://en.wikipedia.org/wiki/Wilbert_J._McKeachie&quot;&gt;McKeachie&lt;/a&gt;’s &lt;a href=&quot;https://www.cengage.uk/shop/isbn/9781133936794&quot;&gt;Teaching Tips&lt;/a&gt;“&lt;/strong&gt;. The title of the post is the title of the chapter.&lt;/p&gt;

&lt;p&gt;According to the author, &lt;em&gt;“Effective lectures combined the talents of scholar, writer, producer, comedian, entertainment, and teacherEffective lectures combined the talents of scholar, writer, producer, comedian, entertainment, and teachers in ways that contribute to student learning. in ways that contribute to student learning.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I think the two main questions that this chapter tackles are: Is the lecture (&lt;em&gt;still&lt;/em&gt;) an effective method of teaching? If it is, under what conditions is it most effective? The &lt;em&gt;“still”&lt;/em&gt; in the first question above is not really part of the text of the chapter but I’ve added it because it is clearly implied by its introduction.&lt;/p&gt;

&lt;p&gt;Most research seems to point out that lectures in the traditional sense are less effective than active learning methods or text sources. In spite of this, lectures may still be useful to present more up-to-date information, to summarize materials from multiple sources, and to orient students by focusing on key concepts, principles, or ideas, pointing them to materials that provide them with more in-depth knowledge. Lectures also have an important motivational element because the lecturer’s enthusiasm and motivation are transmitted to the students and also because the lecture can point out contradictions or conflicting viewpoints. Personally, I find the enthusiasm aspect really important. In my own personal experience, I tend to get bored with lectures where the lecturer her or himself looks bored.&lt;/p&gt;

&lt;h2 id=&quot;preparing-a-lecture&quot;&gt;Preparing a lecture&lt;/h2&gt;

&lt;p&gt;When &lt;strong&gt;planning lectures&lt;/strong&gt;, one must bear in mind that contemporary teaching should be less and less about knowledge dispensing. It makes more sense to try to teach students to learn and think, by analyzing materials, formulating problems, developing hypotheses, criticizing and evaluating solutions. In a way, this means that the lecturer is not teaching the students a specific subject but teaching them how to learn from her/him. A corollary from this is that lectures in a course should start at a slower pace so that students acquire tacit knowledge about the method, procedures, and conventions in the field under study. This allows them to learn in a more autonomous way. Another important aspect is adapting to the varied needs of students so as to account for different backgrounds, interests, and motivations. Ideally, the lecturer should put some effort into becoming familiar with their audience.&lt;/p&gt;

&lt;p&gt;The chapter also devotes a section to discussing &lt;strong&gt;preparation of lecture notes&lt;/strong&gt;. In summary, if notes are too detailed, lecturers tend to pay too much attention to them, which means less direct interaction with the students and a more boring lecture. The chapter also suggests the use of graphical representations (for the notes) because this promotes &lt;em&gt;“flexibility and spontaneity”&lt;/em&gt;. These graphical notes can also be used in lecture slides. The author also recommends the use of cues to the lecturer, e.g., &lt;em&gt;“Write on the board”&lt;/em&gt;, &lt;em&gt;“ask for examples”&lt;/em&gt;, &lt;em&gt;“show source code example”&lt;/em&gt; (for a more detailed example that involves programs), etc.&lt;/p&gt;

&lt;p&gt;Lecturers tend to &lt;strong&gt;organize&lt;/strong&gt; their lectures in terms of the content they want the students to learn. According to the author, lecturers should instead strive to tell a story, e.g., a mystery, because this not only engages students better but also aids in memorization. Analogies are also very effective because they build a connection between the topic being taught and the knowledge that students already have.&lt;/p&gt;

&lt;h2 id=&quot;parts-of-a-lecture&quot;&gt;Parts of a lecture&lt;/h2&gt;

&lt;p&gt;About the &lt;strong&gt;introduction of a lecture&lt;/strong&gt;, the author has the following to say:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“the introduction of the lecture should point to a gap in the students existing cognitive structure or should challenge or raise a question about something in the students existing method of organizing material in order to arouse curiosity.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The author latter emphasizes the importance of asking questions early in the lecture to guide the student’s learning. He gives an example in the context of cognitive changes in aging: &lt;em&gt;“Do you get more or less intelligent as you get older?”&lt;/em&gt;. These questions emphasize what students should learn from the lecture and thus should focus on its most important aspects. It is also possible to present quizzes before and after the lecture, again, to better direct the learning and focus on the most important parts. Finally, another effective strategy for the intro is to begin with problems or cases presented in newspapers or TV shows.&lt;/p&gt;

&lt;p&gt;When discussing the &lt;strong&gt;body of the lecture&lt;/strong&gt;, one of the first things the author says is that &lt;em&gt;“the enemy of learning is the teacher’s need to cover the content at all costs”&lt;/em&gt;. Besides arguing about the need to avoid overloading the student with too much content, the text discusses some techniques that can be used to improve information retention: examples, humor (although it is a double-edged sword, since sometimes the students will remember the humor more than the point it is trying to convey), periodic summaries, and checking students’ understanding. For the later, the text presents the interesting suggestion of giving students one minute to discuss with their neighbors and write down the questions that arise from that quick discussion. According to the author, it is even more effective to have activities within the lecture.&lt;/p&gt;

&lt;p&gt;For the &lt;strong&gt;conclusion of the lecture&lt;/strong&gt;, besides the obvious (recaping the lecture), an interesting idea is to give three minutes for students to write a &lt;em&gt;“minute paper”&lt;/em&gt;. This forces them to think about what were the most important things they learned and organize it. These papers can even be collected and used as part of an ongoing evaluation. The lecturers in the BKO course use this approach after each lecture. I really enjoy it because it leads me to reflect on my learning.&lt;/p&gt;

&lt;h2 id=&quot;how-to-improve-lectures&quot;&gt;How to improve lectures&lt;/h2&gt;

&lt;p&gt;The entire chapter can be summarized in the following snippet: &lt;em&gt;“one way of improving lectures is to think about how students process lectures.”&lt;/em&gt; This is related to what students think and do during lectures and how that can be leveraged to improve learning.&lt;/p&gt;

&lt;p&gt;Keeping students’ &lt;strong&gt;attention&lt;/strong&gt; focused on the lecture is one of the most important and challenging aspects of being a lecturer. According to the author, attention &lt;em&gt;“involves focusing one’s cognition on those things that are changing, motivating, or novel.”&lt;/em&gt; Some general tips to grab the attention of students include saying that something will be on the test, varying aspects of the lecture such as its pace, intensity, and volume, making gestures, moving, and making eye contact with the students. Other tips include giving examples that relate to the students’ interests, and presenting the topic as a mystery to be solved. I’ve done the latter in the past when talking about economic incentives for companies to contribute to OSS. It really seems to help capture the students’ attention.&lt;/p&gt;

&lt;p&gt;Two techniques that the chapter highlights as particularly effective are to avoid going too long without a break and using “clickers”. The first case is self-explanatory: lecturers should give breaks regularly, even if just to ask students to stand up and stretch a bit. The second involves providing students with devices that allow them to respond to questions during the lectures just by clicking on one of a few possible options. This approach can be implemented easily in on-line classes (by means of Mentimeter/wooclap, reacting to comments, etc.) or in in-person classes where every student has a laptop. In scenarios where these premises don’t hold, it is still possible, although a bit more cumbersome, to use post its or something similar.&lt;/p&gt;

&lt;p&gt;The chapter makes an interesting discussion about note taking. On the positive side, taking notes is useful because it helps students pay attention to a lecture. Furthermore, if the notes involve not just writing verbatim what the lecturer says but also to transform and interpret that information, it is a very useful tool to improve memorization and help making connections. Finally, it is an &lt;em&gt;“external memory”&lt;/em&gt; that students can later review. On the negative side, taking notes consumes attention resources from the students and those resources may be required to understand more complex topics. This is related to the amount of information students are able to retain in their short-term memory.&lt;/p&gt;

&lt;h2 id=&quot;concluding-remarks&quot;&gt;Concluding remarks&lt;/h2&gt;

&lt;p&gt;This chapter helped me understand a bit better how students process information in class. Thinking about short- and long-term memory, time required for note-taking, and how much attention students are able to give in class can have very practical impacts. The chapter also provided me with many useful suggestions to improve my classes, such as giving regular breaks, not prioritizing subject coverage in lectures, communicating my enthusiasm about the topic at hand, and creating opportunities for students to interact during lectures are all sound advice.&lt;/p&gt;

&lt;p&gt;One limitation of this otherwise super useful chapter is the strong focus on in-person activities. Many of the recommendations only make sense if there is a student physically sitting beside the other. For online classes, I think it would be harder to engage the students in the same manner and alternative solutions would be necessary.&lt;/p&gt;
</description>
        <pubDate>Mon, 13 Dec 2021 17:50:00 +0100</pubDate>
        <link>http://localhost:4000/teaching/2021/12/13/effective_lectures.html</link>
        <guid isPermaLink="true">http://localhost:4000/teaching/2021/12/13/effective_lectures.html</guid>
        
        
        <category>teaching</category>
        
      </item>
    
      <item>
        <title>Motivational Regulation Strategies and Student Engagement in Online Courses</title>
        <description>&lt;p&gt;This is a brief summary of the following paper:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sanghoon Park &amp;amp; Heoncheol Yun (2018):&lt;/em&gt; &lt;strong&gt;The Influence of Motivational Regulation Strategies on Online Students’ Behavioral, Emotional, and Cognitive Engagement&lt;/strong&gt;. &lt;em&gt;American Journal of Distance Education. 32(1), pp. 43-56.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It studies the impact of eight motivational regulation strategies on three types of student engagement. &lt;strong&gt;Behavioral engagement&lt;/strong&gt; concerns participation in learning activities. &lt;strong&gt;Emotional engagement&lt;/strong&gt; pertains to the affective attitudes toward learning and school. &lt;strong&gt;Cognitive engagement&lt;/strong&gt; refers to the approach students use to analyze and verify their learning, e.g., asking questions to themselves to check whether they learned something. The study is based on a cohort of 95 undergraduate and graduate students enrolled in online courses. Previous work has shown that students at these different levels have different characteristics in terms of their use of motivational regulatory strategies and in how they procrastinate.&lt;/p&gt;

&lt;p&gt;Online study requires a higher degree of autonomy and self-regulation compared with traditional classroom learning, where instructors have more control over learning activities. As the authors mention, &lt;em&gt;“with the growing trend of online learning in higher education […], the need to support a highly motivated and self-regulated online learner has never been greater”&lt;/em&gt;. &lt;strong&gt;Motivation&lt;/strong&gt; is an intrinsic process that cannot be measured. &lt;strong&gt;Engagement&lt;/strong&gt; is extrinsic, the outcome of motivation.&lt;/p&gt;

&lt;p&gt;Self-regulation is very important in learning. Self-regulated learners take an active role in controlling, monitoring, and evaluating their learning. There is evidence that self-regulated learners (not clear exactly what makes a learner self-regulated) exhibit confident behaviors and high performance. They also tend to possess more intrinsic motivation.&lt;/p&gt;

&lt;p&gt;Motivational Regulation Strategies are the strategies employed by students or lecturers to optimize students’ learning efforts during the learning process. According to Wolters and Mueller (2010), MRSs refer to &lt;em&gt;“thoughts and behaviors through which students act to initiate, maintain, or supplement their willingness to start or to provide effort toward completing academic activities”&lt;/em&gt;. The paper lists eight motivational regulation strategies discussed by Schwinger, Steinmayr, and Spinath (2012):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Enhancement of a situational interest: turning a relatively tedious task into a more fascinating one through imaginative modification​&lt;/li&gt;
  &lt;li&gt;Enhancement of personal significance: connection between the task and one’s personal interests​&lt;/li&gt;
  &lt;li&gt;Mastery self-talk: highlight the goal to enlarge one’s competence and master challenging tasks&lt;/li&gt;
  &lt;li&gt;Performance-approach self-talk: competitive with colleagues​&lt;/li&gt;
  &lt;li&gt;Performance-avoidance self-talk: avoiding bad comments or people that would make fun of poor performance&lt;/li&gt;
  &lt;li&gt;Environmental control: intentionally eliminating possible distractions and also telling others about the learning plan so they can protect it​&lt;/li&gt;
  &lt;li&gt;Self-consequating: self-administered gratification or reward for achieving a certain goal​&lt;/li&gt;
  &lt;li&gt;Proximal goal setting: dividing learning materials into small and manageable pieces to experience success more quickly and frequently​&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I think most of them are of a more personal nature and depend very strongly on the students themselves. A couple can be leveraged by instructors, though. For example, &lt;em&gt;“Turning a relatively tedious task into a more fascinating one through imaginative modification”&lt;/em&gt;. Listening to lectures is a bit boring and I think including some interactive activities can increase engagement. Student response in the examples I’ve used (basically just mentimeter, so far) tends to be pretty good. Personally, I also try to practice &lt;em&gt;“Enhancement of personal significance: Establishing”&lt;/em&gt; by assuming that most students want to be good professionals and highlighting the importance of the topic I am teaching for them to reach that goal but I am not sure I achieve anything with this.&lt;/p&gt;

&lt;p&gt;The paper leverages a hierarchical multiple regression to establish which strategies are good predictors for self-reported engagement, considering the three types of engagement. The main takeaways from the statistical analysis are the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;students should be encouraged not to use the “performance-avoidance self-talk” strategy if behavioral engagement is required for online learning activities.&lt;/li&gt;
  &lt;li&gt;controlling the environment for distractions is a predictor for behavioral engagement&lt;/li&gt;
  &lt;li&gt;mastery self-talk positively influences emotional engagement. The emphasis here is on emphasizing mastery of learning goals, instead of performance comparison with peers.&lt;/li&gt;
  &lt;li&gt;“performance-avoidance self-talk” is, surprisingly, a positive predictor of cognitive engagement. The same goes for “enhancement of personal significance”.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Schwinger, M., Steinmayr, R., &amp;amp; Spinath, B. (2012). Not all roads lead to Rome: Comparing different types of motivational regulation profiles. Learning and Individual Differences, 22, 269–279. doi:10.1016/j.lindif.2011.12.006&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Wolters, C. A., &amp;amp; Mueller, S. A. (2010). Motivation Regulation. In Baker, E., McGaw, B., &amp;amp; Peterson, P. (Eds.), International Encyclopedia of Education (3rd ed., pp. 631–635). Oxford, UK: Elsevier.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 30 Nov 2021 13:50:00 +0100</pubDate>
        <link>http://localhost:4000/teaching/2021/11/30/mrs_engagement.html</link>
        <guid isPermaLink="true">http://localhost:4000/teaching/2021/11/30/mrs_engagement.html</guid>
        
        
        <category>teaching</category>
        
      </item>
    
      <item>
        <title>Motivation in the College Classroom</title>
        <description>&lt;p&gt;One important difference between &lt;a href=&quot;https://www.uu.nl&quot;&gt;Utrecht University&lt;/a&gt; and basically every university where I have worked or been a student at previously is the importance that it, as an institution, gives to the quality of the teaching. It shows this in a very practical way by requiring every professor, at every level, to have at least a &lt;a href=&quot;https://www.uu.nl/en/education/centre-for-academic-teaching/university-teaching-qualification-utq&quot;&gt;Basic Teaching Qualification&lt;/a&gt; where, among other things, professors are expected to have taken multiple courses to improve their teaching practice. I am currently undergoing a course called &lt;strong&gt;“&lt;a href=&quot;https://www.uu.nl/agenda/teaching-in-higher-education-bkoutq-course-in-english&quot;&gt;Teaching in Higher Education&lt;/a&gt;“&lt;/strong&gt; that is considered particularly important for the aforementioned qualification. As part of the course, I am studying a well-known book called &lt;strong&gt;“&lt;a href=&quot;https://en.wikipedia.org/wiki/Wilbert_J._McKeachie&quot;&gt;McKeachie&lt;/a&gt;’s &lt;a href=&quot;https://www.cengage.uk/shop/isbn/9781133936794&quot;&gt;Teaching Tips&lt;/a&gt;“&lt;/strong&gt;. In particular, I was asked to read chapter 11, &lt;strong&gt;“Motivation in the College Classroom”&lt;/strong&gt;, written by Prof. &lt;a href=&quot;https://www.middlebury.edu/academics/psych/faculty/node/21411&quot;&gt;Barbara Hoffer&lt;/a&gt; of &lt;a href=&quot;https://www.middlebury.edu/&quot;&gt;Middlebury College&lt;/a&gt;. This chapter is super interesting and left me wanting to be a better lecturer. Below I list some of the highlights of that chapter (for me), in very summarized format.&lt;/p&gt;

&lt;p&gt;Researchers typically consider three indices of motivation:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Choice&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Effort&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Persistence&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Achievement is viewed as an outcome of these indices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Autonomy&lt;/strong&gt; and &lt;strong&gt;self-determination&lt;/strong&gt; positively impact motivation, i.e., choice is good. Too much choice is bad, though (&lt;a href=&quot;https://en.wikipedia.org/wiki/The_Paradox_of_Choice&quot;&gt;Paradox of Choice&lt;/a&gt;). One possibility of giving students choice pertains to the dates when to hand in assignments.&lt;/p&gt;

&lt;p&gt;Extrinsic rewards are most effective when they provide informative feedback. In other words, grades by themselves are too little feedback and do not help students improve. Even better would be to, as much as possible, separate feedback from grades, e.g., to provide just feedback for a draft of a paper, without grades. In addition, it is very important that students see the (practical) value of what they are studying. This is a strong generator of motivation.&lt;/p&gt;

&lt;p&gt;Students study with one of two goals: &lt;strong&gt;Mastery goals&lt;/strong&gt; vs. &lt;strong&gt;Performance goals&lt;/strong&gt;. The way a course is organized can induce one goal or the other more. In any case, these kinds of goals exist along two different ranges, e.g., a student may be motivated by both mastery and performance goals. . For the latter, grading usually motivates comparison, e.g., because only certain percentages of the students can reach a certain maximum grade. &lt;strong&gt;What kind of evaluation would induce mastery goals?&lt;/strong&gt; The text does not make it clear.&lt;/p&gt;

&lt;p&gt;Students make rational decisions about how much time to invest in a course to the detriment of the others. Lecturers should make it clear how much effort is expected from the students, e.g., whether to read something in depth or to just skim through it.&lt;/p&gt;

&lt;p&gt;When students obtain a result that differs from what they expect, they will tend to attribute causes to that outcome. There are three dimmensions for that attribution:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;locus&lt;/strong&gt;: internal vs. external&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;stability&lt;/strong&gt;: stable vs. unstable&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;luck&lt;/strong&gt;: controllable vs. uncontrollable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If a student tends to consider that an unexpected outcome stems from internal, stable, controllable reasons, e.g., &lt;em&gt;“I know I didn’t prepare well for the test”&lt;/em&gt;, she/he is more likely to do better next time because she believes that the outcomes depends on her actions and can be controlled. On the other hand, attributing the causes to external factors/luck, e.g., &lt;em&gt;“I will never understand statistics”&lt;/em&gt;, means that she will not feel motivated to improve, due to believing that it is not possible/useful.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Beliefs&lt;/strong&gt; impact motivation. Feedback that fuels some beliefs may be more beneficial for motivation. There’s the now well-known example: if a student performs well in a test or assignment compliment her/his effort instead of saying that she/he is smart. In the former case, the student will feel acknowledged and possibly keep on making effort. In the latter case, the student is likely to try to maintain that perception and may take shortcuts as a consequence.&lt;/p&gt;

&lt;p&gt;The chapter ends with a list of practical recommendations that nicely summarized what was discussed:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;When planning assignments, consider issues of choice and control, e.g., in terms of when to hand in assignments, which exercises to do (among a pre-determined list), or subjects in which they would like to go deeper.&lt;/li&gt;
  &lt;li&gt;Project you own motivation – for the subject matter and for the students. You are a role model and your passion (or lack thereof) is perceived and absorbed by the students.&lt;/li&gt;
  &lt;li&gt;Forster students intrinsic motivation by preparing well for class, using various instructional formats, interactive activities, promoting discussion.&lt;/li&gt;
  &lt;li&gt;Make the value of the course explicit.&lt;/li&gt;
  &lt;li&gt;Adopt a criterion-based approach to grading, instead of a normative one.&lt;/li&gt;
  &lt;li&gt;Test frequently enough that students become accostumed to the format and have the opportunity to learn from their mistakes.&lt;/li&gt;
  &lt;li&gt;When grading tests, consider dropping questions missed (or incorrectly responded) by a large number of students and re-teach the topic after the test. This sends the message that there is a shared responsibility for learning and reinforces the idea that the lecture is their to help them learn and achieve mastery and not simpy to penalize them for mistakes.&lt;/li&gt;
  &lt;li&gt;Provide feedback that is constructive and non-controlling.&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 27 Nov 2021 16:15:00 +0100</pubDate>
        <link>http://localhost:4000/teaching/2021/11/27/motivation.html</link>
        <guid isPermaLink="true">http://localhost:4000/teaching/2021/11/27/motivation.html</guid>
        
        
        <category>teaching</category>
        
      </item>
    
      <item>
        <title>Nancy Leveson&apos;s keynote at ICSE 2020</title>
        <description>&lt;p&gt;I’ve read quite a few of Prof. Nancy Leveson’s papers on the assumption of independence between different versions made by developers of techniques that leverage design diversity, such as N-version programming and recovery blocks, when I was a PhD student. At the time, I also read some of her papers on Software and Systems Safety, the area where she’s one of the world’s most prominent experts. With this background, I was really looking forward to her keynote at ICSE 2020. Prof. Leveson started with a quote by Mark Twain:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“What gets us into trouble is not what we don’t know. It’s what we know for sure that just ain’t so.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;An &lt;strong&gt;accident&lt;/strong&gt; or &lt;strong&gt;mishap&lt;/strong&gt; is any undesired and unplanned event that results in loss. Loss here has a wide-encompassing meaning, e.g., loss of human life, environmental damage, negative business impact, property damage, legal entanglements, among other issues. Something’s &lt;strong&gt;safe&lt;/strong&gt; if we don’t have losses. Safety engineering is all about &lt;strong&gt;hazards&lt;/strong&gt;. A hazard is a state or set of conditions that, together with a particular set of worst-case environmental conditions, will lead to an accident. Safety engineering aims to support the construction of safer systems by identifying and preventing/eliminating/including safeguards against hazards and reducing or avoiding losses. &lt;em&gt;Software is not, by itself, unsafe&lt;/em&gt;, since it cannot, in isolation, cause loss. It can contribute to hazards, though, since the control signals it generates can be unsafe.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Safety&lt;/strong&gt; and &lt;strong&gt;reliability&lt;/strong&gt; are not directly related. Some reliable systems are unsafe, depending on the circumstances. Virtually all software-related accidents stem from unsafe requirements, not errors in software design or implementation. 
Prof. Leveson mentioned an example of a planned missile test where a dummy missile would be aimed and ``fired’’ at an aircraft. The system responsible for firing was also responsible for determining the best position from which to fire the missile. The system identified an obstacle, an antenna, that would hinder the firing of the dummy missile and decided to fire a &lt;em&gt;real missile&lt;/em&gt; located at a different position. The system did not fail (it was &lt;em&gt;reliable&lt;/em&gt;) but could have caused loss (it was &lt;em&gt;unsafe&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Failures may stem from component failures. However, they may also be a consequence of complex component interactions where no single component fails. These components are not all software, though some of them are. These are high level design errors. More generally, according to prof. Leveson, the role of software in accidents &lt;em&gt;almost always involves flawed requirements&lt;/em&gt;. She also stated that (hope my paraphrasing is reliable) operator errors do not cause accidents. Accidents occur because of design flaws that make systems unsafe when operators take certain actions. A safe system is designed so as to reduce loss caused by human errors.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Context&lt;/em&gt; determines whether software is safe or not. Ariane 4’s software was safe but when reused in Ariane 5 the spacecraft exploded. The cause of the explosion was incorrect assumptions about how the reused software would behave under certain conditions, not a software malfunction. As a metaphor, we can think of a butter knife. Using it to pass butter is perfectly safe but using it to mess with a power outlet is unsafe.&lt;/p&gt;

&lt;p&gt;Contemporary systems that use software are too complex for complete analysis, e.g., formal methods, and not random enough for statistical analysis. In summary, Prof. Leveson believes we should stop seeing safety as failure problem  and treat it as a control problem. Systems should be analyzed holistically, with a focus on emergent properties that do not stem from single components but instead from their complex interactions. Prof. Leveson believes that both safety and security are emergent. It is necessary to consider their entire sociotechnical system. This got me thinking: Could we bring that viewpoint to lower-level concerns, such as energy efficiency, which interests me a lot? For example, what is the impact of users’ lack of focus and task switching on overall energy efficiency? Is it possible to reduce energy consumption stemming from this without having to impose unnatural behavior patterns on users? Just wondering.&lt;/p&gt;

&lt;p&gt;As a final note, I authored the most upvoted, albeit most poorly-written, question of the session: &lt;em&gt;“How do you envision the widespread use of machine learning can negatively impact safety? Do you foresee it having a positive impact?”&lt;/em&gt; In summary, prof. Leveson said that there’s still not a definite answer, since it is so hard to know what systems that leverage machine learning will do, i.e., what decisions they will make, but she and her group are working on the problem and expect to have some answers in the next few months.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt;: Prof. Leveson received many questions, one of them about the pressure to publish and how we sometimes write papers based on toy tools. Her message was very clear: we should publish less and better. She then went on to talk about a paper she published more than 30 years ago on safety analysis using Petri Nets that ranks amongst her most well-cited (and she is very well-cited!). She believes this paper should not have been written and published because, in her opinion, it is not useful.&lt;/p&gt;
</description>
        <pubDate>Tue, 07 Jul 2020 01:30:00 +0200</pubDate>
        <link>http://localhost:4000/research/2020/07/07/nancy-leveson.html</link>
        <guid isPermaLink="true">http://localhost:4000/research/2020/07/07/nancy-leveson.html</guid>
        
        
        <category>research</category>
        
      </item>
    
      <item>
        <title>Quick Notes about How Apple Silicion Impacts Swift Developers</title>
        <description>&lt;p&gt;New Macs will use Apple-developed processors, not Intel. This new architecture has been named &lt;em&gt;Apple silicon&lt;/em&gt;. Initial Developer Transition Kits (DTKs) are ready to be shipped to developers. They will pack the A12Z processor of the iPad Pro. Many apps are already being ported to leverage Apple silicon. Unity apparently has already been ported to run natively on Apple silicon and Microsoft’s Office is on the way.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Universal apps&lt;/strong&gt; One approach to support the transition from Intel to Apple silicon is the use of universal apps. These apps are packaged so as to include two partitions, one for each architecture, Intel and Apple silicon. This is similar to the old universal binaries from when Apple transitioned from PPC to Intel. Xcode will provide an &lt;em&gt;“Any Mac”&lt;/em&gt; option that outputs universal apps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rosetta 2&lt;/strong&gt; is emulation technology that allows Intel apps to run on Apple silicon Macs. It even supports apps that require more direct access to hardware, games, for example. It translates calls to libraries such as Metal and system calls in general to native calls that leverage the Apple silicon hardware. Xcode still supports all the expected features for development even when using Rosetta, including lower level ones, such as debugging memory graphs. I think the most important feature of Rosetta 2 is how transparent it seems to be for developers, from both development effort and app performance. Rosetta 2 also supports apps extensions, which run on processes different from the host process.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Virtualization&lt;/strong&gt; Apple also aims to provide &lt;em&gt;native&lt;/em&gt; support for virtualization, without the need for Kernel extensions, for VMs running on Apple silicon. The point here is not just to provide support for virtualization (there are already some VMs for Mac, such as VirtualBox), but to provide it natively, so that the performance of an application is affected as little as possible by the use of virtualization.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;iPhone, iPad apps&lt;/strong&gt; These apps can now run natively on Macs using Apple silicon, without any additional development effort. Some additional features will not be available, though, if the app is directly ported. It is possible to tailor an iOS or iPadOS app to run better on the Mac by using Mac Catalyst. Settings from the iOS/iPadOS app are automatically mapped to the application settings on the MacOS, multitasking iPad apps automatically support window resizing, and extensions to iOS apps automatically work on MacOS, just to give a few examples. There is a default mapping between touch commands and what a Mac supports.&lt;/p&gt;
</description>
        <pubDate>Wed, 24 Jun 2020 23:20:00 +0200</pubDate>
        <link>http://localhost:4000/swift/2020/06/24/apple-sillicon.html</link>
        <guid isPermaLink="true">http://localhost:4000/swift/2020/06/24/apple-sillicon.html</guid>
        
        
        <category>swift</category>
        
      </item>
    
      <item>
        <title>The First Days of my Long-Awaited Sabbatical in Japan</title>
        <description>&lt;p&gt;Finally, after some four years of careful planning, two of them working as coordinator of &lt;a href=&quot;http://www.cin.ufpe.br&quot;&gt;CIn-UFPE&lt;/a&gt;’s Computer Science undergraduate program (I mention this just because I did not enjoy it at all), I am taking my first sabbatical. I will be working for four months as a Visiting Professor at the &lt;a href=&quot;http://prg.is.titech.ac.jp/&quot;&gt;research group&lt;/a&gt; of the great prof. &lt;a href=&quot;http://prg.is.titech.ac.jp/people/masuhara/&quot;&gt;Hidehiko Masuhara&lt;/a&gt;, at &lt;a href=&quot;https://www.titech.ac.jp/&quot;&gt;Tokyo Institute of Technology&lt;/a&gt; (東京工業大学). Here, inspired by my wife’s and my father’s very interesting travelogs, I try to summarize some of the highlights of this experience, in no particular order.&lt;/p&gt;

&lt;h1 id=&quot;arrival&quot;&gt;Arrival&lt;/h1&gt;

&lt;p&gt;There are many mascots and figures all over the Narita airport, just like everywhere else in the country. This is exacerbated by the proximity of the 2020 summer olympics, which will be held in Tokyo. Mario became a kind of informal mascot for the games, with Prime Minister Abe Shinzo even dressing up as the character at the closing ceremony of the 2018 Rio olympics. At the airport, this status Mario achieved as an instantly recognizable element of Japanese culture in the world is explicit.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/fernandocastor/fernandocastor.github.io/master/images/rosalina_daisy.jpg&quot; alt=&quot;Rosalina and Daisy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/fernandocastor/fernandocastor.github.io/master/images/koopas.jpg&quot; alt=&quot;Rosalina and Daisy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At immigration, I had the first taste that this trip would be different from previous times I’ve been to Japan. I had to go through a separate line only for travelers with resident status in Japan. Waited a little bit there and got my resident card. I felt really proud of this document for absolutely no reason. The immigration officer told me that I would need to go to the ward office closest to my residence to register my address. I thanked him, grabbed my luggage and went to catch the bus to Tokyo. First thing that caught my attention when I left the airport terminal to catch the bus: &lt;strong&gt;the HEAT&lt;/strong&gt;. In previous trips to Japan, I’ve always come either in Winter or in the beginning of Spring. This time, I arrived one week in the fall but it still felt like the height of summer. In the first couple of days,Tokyo was actually hotter than Recife.&lt;/p&gt;

&lt;h1 id=&quot;living&quot;&gt;Living&lt;/h1&gt;

&lt;p&gt;I am staying near (for Tokyo standards) Ikebukuro station, in the northern part of central Tokyo (yes, that makes sense). Ikebukuro is a very busy commercial district and the train station is, in my humble opinion, the most confusing of the major stations along the Yamanote train line (with Shinjuku being a close second). The neighborhood is very nice, with lots of small restaurants and konbinis at walking distance, close enough to the major station to walk there but still far enough to be tranquil. As a bonus, there is a metro station really close to my house. The only downside is that the house is more than 16km away from Tokyo Tech. Not a big bother since I’ll be relocating in November, but it takes me one hour to get there by train.&lt;/p&gt;

&lt;p&gt;Before coming here, I planned to buy a bicycle to move around more easily and simply because I enjoy riding a bicycle. Furthermore, the Japanese bike all the time, everywhere. There are many mothers with their kids in their (often electrical) mamacharis, salarymen wearing suites, students, seniors, more hardcore bikers in road racers wearing lycra, etc. I bought my cheap, new mamachari two days after I arrived.  It is not very good (no gears, feels very heavy), but it is perfectly usable for four months. Enough to move around. Prior to buying it, I read some three or four tutorials exclusively about how to park a bicycle in Japan. No jokes. It is not trivial.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/fernandocastor/fernandocastor.github.io/master/images/bicicleta.jpg&quot; alt=&quot;My bicycle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, riding my bicycle to the university everyday is not feasible for me. Depending on the path I take, the distance is something between 17 and 19km. That would amount to spending 3h just commuting everyday. What I try to do is to go by bicycle once or twice per week and pick it up the following day and ride back home. When I relocate to Oota ward, I’ll be much closer to the university and it will be straightforward to go the the university by bicycle.&lt;/p&gt;

&lt;p&gt;Food in Japan is great. I love sushi, sashimi, oden, kare, tonkatsu, ramen, soba, yakitori, tamagokake, yakiniku and the multiple Chinese, Korean, and Indian restaurants everywhere. One of the things I like the most is the possibility of trying sushi and sashimi with different kinds of fish. In Recife, we usually only have three kinds of fish (tuna, salmon, and swordfish), plus some boiled octopus, kani, and shrimp (to which I am allergic). I try to be adventurous when it comes to sushi and have tried stuff such as sea devil and raw octopus, which are a bit too weird to my taste, but still worth the experience. However, one day while coming back from the university, I stopped by a takeaway sushi place and, after trying to communicate with the attendant without success, bought a small box of tsubugai sushi (つぶ貝). I definitely was not ready for it. The taste was wrong, the consistency was wrong, and something else, not sure what, was wrong. I searched a little bit about what tsubugai is and felt my sense of adventure completely evaporate when I discovered that I was eating sea snail.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/fernandocastor/fernandocastor.github.io/master/images/tsubugai.jpg&quot; alt=&quot;Tsubugai&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;bureaucracy-and-geography&quot;&gt;Bureaucracy and Geography&lt;/h1&gt;

&lt;p&gt;Right after buying my bicycle, I went to the Toshima-ku Ward City Office because it is necessary to notify the city office about where I live. There I discovered that the address of my apartment at AirBNB might have been wrong, though not wrong enough for me not to find it. I went back home, double-checked the address, discovered that it was in fact wrong, and returned to the city office. Addresses in Japan have always confused me. First, because they do not use streets the same way we do. Each city is organized in neighborhoods, or districts, which are organized in sets of blocks of irregular size (choume – 丁目) where each block has a unique number and every construction in a block also has a unique number. Thus, we have addresses such as Ikebukuro 3-Choume 3-2. Second, the concept of a city is different from ours, at least in Tokyo. Toshima-ku, where I am living, is treated as a city and the city office is just like any city hall. Toshima-ku is one of Tokyo’s 23 special wards, which have city-like status, including potentially infinitely re-electable mayors. Toshima-ku’s mayor, Takano Yukio, is currently in his sixth term  (as of November 2019). The Tokyo &lt;strong&gt;Prefecture&lt;/strong&gt;, which comprises these 23 special wards plus a number of cities and towns, is currently governed by Koike Yuriko, the first woman to hold this position. Ikebukuro is the most well-known district of the Toshima ward. Some of the special wards are huge. Setagaya has more than 900,000 inhabitants and Nerima and Oota more than 700,000 each.&lt;/p&gt;

&lt;p&gt;I stayed one hour and a half at the City Office to register the (now correct) address. Then I discovered that I also had to enroll in the National Health Insurance (NHI), even though I had travel insurance. Waited one hour and a half more and left the building with another local document, this one pertaining to the NHI. Overall, it was not a bad experience. Everything was well-organized and everyone who talked to me was extremely kind. I just don’t want to go through it again, which is too bad because I’ll have to notify the city office again when I move to another ward (and notify the new ward as well). I also discovered that I have bills to pay in Japan (because of the NHI). Again, for absolutely no reason, I felt proud of that.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/fernandocastor/fernandocastor.github.io/master/images/toshima.jpg&quot; alt=&quot;Toshima Ward City Office&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 18 Oct 2019 16:00:00 +0200</pubDate>
        <link>http://localhost:4000/personal/2019/10/18/sabbatical.html</link>
        <guid isPermaLink="true">http://localhost:4000/personal/2019/10/18/sabbatical.html</guid>
        
        
        <category>personal</category>
        
      </item>
    
      <item>
        <title>Disorganized Notes about WWDC 2019, Day 5, 2019-06-07</title>
        <description>&lt;p&gt;Every year, Apple promotes its Worldwide Developers Conference, which this year gathered 6000 atendees from more than 70 countries. Since I am attending, I am using this blog to publish my completely disorganized, not revised, and not-for-public-consumption notes. This is the final post, a bit shorter than the previous ones.&lt;/p&gt;

&lt;h1 id=&quot;bulding-custom-views-with-swiftui&quot;&gt;Bulding Custom Views with SwiftUI&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.edgesIgnoringSafeArea&lt;/code&gt; is a property that allows a view to be placed out of the safe area of the screen, for example, too close to the top or bottom of the screen.&lt;/p&gt;

&lt;p&gt;In SwiftUI, there’s no way to force a size upon a view. The parent view &lt;em&gt;proposes&lt;/em&gt; a size to the child view, however, the child view is responsible for choosing its own size, maybe by fixing, maybe by stating its aspect ratio.&lt;/p&gt;

&lt;p&gt;When using stacks to lay out elements on the app screen, SwiftUI already follows Apple’s design guidelines in terms of spacing between  elements on the screen. It is possible, however, to explicitly specify how much space there will be between  elements. In addition, it is possible to specify alignment for all the views within a stack. It is also possible to be very specific about how an item will be aligned wrt to the baseline of the stack. Alignment can be vertical or horizontal. Finally, it is possible to define new kinds of alignments (by creating an extension to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VerticalAlignment&lt;/code&gt; and a biit more stuff).&lt;/p&gt;

&lt;p&gt;When laying out visual elements on the screen, it is possible that the text, for example, does not fit the screen space and parts of it will be truncated. SwiftUI makes it possible for the developer to specify the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layoutPriority&lt;/code&gt; of an item on the screen, so that it is not truncated or is truncated last, after the items with lower layout priority are truncated.&lt;/p&gt;

&lt;p&gt;SwiftUI supports drawing shapes, like circles, ovals, etc. It also supports the construction of gradients, shapes that include only a thick border. The drawing primitives seem to be powerful and composable. The presents have shown a really interesting drawing comprising multiple wedges that do not inclue the part closer to the center of the circle, of different sizes, and painted using different color gradients. It does this by drawing the wedge using a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Path&lt;/code&gt;s.&lt;/p&gt;

&lt;p&gt;When drawing multiple animated elements on the screen, it is possible combine them to become a single view. This can make animation smoother.&lt;/p&gt;

&lt;h1 id=&quot;optimizing-storage-in-your-app&quot;&gt;Optimizing Storage in Your App&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Efficient image assets&lt;/strong&gt;. HEIC is a more efficient alternative to JPG. Up to 50% smaller files when compared to JPG. This means that they take more space, load faster, and trasnfer faster. App size is reduced. It uses lossless compression.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Asset catalogs&lt;/strong&gt;. Easy way to store multiple resolutions of resources. A resource may even be marked as on-demand, meaning that it will only be downloaded when necessary. It reduces storage space by avoiding the need to store multiple image files. Mooreover, it can also improve performance. It makes it easier to use GPU-based, in other words, hardware-assisted compression and decompression.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;File system metadata&lt;/strong&gt;. On launch, our app reads and updates the plist file. One of the writes is to the file to be update but the other two pertain to filesystem metadata updates.  Filesystem metadata is information the filesystem must keep track of about our files, stuff such as name, creating and last update dates, size, etc. Operations such as writing, renaming, or deleting a file has a metadata overhead due to bookeeping. This overhead ranges from 8 to 16K. To reduce this, (i) create a file; (ii) keep it open and unsynched. The bottom line is: &lt;em&gt;making multiple small write operations is expensive&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;APFS is &lt;em&gt;copy-on-write&lt;/em&gt; by nature.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Serialized data files&lt;/strong&gt;. Plists, XML, JSON, YAML, and the like. They are inefficient because, basically, each write requires writing the entire file to disk again. If the data one needs to manage is too large or modified too frequently, it is more efficient to use Core Data. It is built upon SQLite and provides the kind of features one would expect from a DBMS, such as connection pooling, schemas. According to the presenter, Core Data also requires writing less code.&lt;/p&gt;

&lt;p&gt;If using SQLite databases, use WAL (Write-Ahead Log) mode, instead of delete mode journaling. WAL groups sets of logical writes using the OS cache so that the number of physical writes is significantly reduced.&lt;/p&gt;

&lt;p&gt;It is better to use multiple statements within the same transaction than multiple, single-statement transactions, specially if they may end up modifying the same database pages. This reduced the number of syscalls, which reduces time footprint, and the required storage due to reduced bookeeping requirements.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;File Activity Instrument&lt;/strong&gt;. Now supports all Apple devices. Works for both one app and all processes running on the system. It also supports “automated reasoning”. Helps detect symptoms such as excessive physical writes,. failed I/O related calls, suboptimal caching&lt;/p&gt;

&lt;h1 id=&quot;swiftui-on-all-devices&quot;&gt;SwiftUI on All Devices&lt;/h1&gt;

&lt;p&gt;Although SwiftUI is a technology that can be employed to build UIs for all the Apple devices, that does not mean that one can build a UI for one device and it will work on all of them. A watch is very, very different from a 4k TV. Phones can make calls and location matters a lot to them. For TVs, that is not the case. On the other hand, they have very big screens and require streamlined and agile navigation. Watch versions should focus on notifications and on presenting the information that is the most critical. A Macbook app can provide high (textual) information density, unlike a TV app; smaller click targets and denser controls.&lt;/p&gt;

</description>
        <pubDate>Fri, 07 Jun 2019 20:35:00 +0200</pubDate>
        <link>http://localhost:4000/swift/2019/06/07/wwdc5.html</link>
        <guid isPermaLink="true">http://localhost:4000/swift/2019/06/07/wwdc5.html</guid>
        
        
        <category>swift</category>
        
      </item>
    
      <item>
        <title>Disorganized Notes about WWDC 2019, Day 4, 2019-06-06</title>
        <description>&lt;p&gt;Every year, Apple promotes its Worldwide Developers Conference, which this year gathered 6000 atendees from more than 70 countries. Sice I am attending, I am using this blog to publish my completely disorganized, not revised, and not-for-public-consumption notes.&lt;/p&gt;

&lt;h1 id=&quot;dataflow-through-swiftui&quot;&gt;DataFlow through SwiftUI&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@State&lt;/code&gt; not only makes a property managed (in the sense of ensuring updates of all the views that depend on the property when it changes) by SwiftUI; it also makes the property writable. This is relevant because it is a property of a struct (views are now structs) and they are, by default, immutable. Every time a variable is marked as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@State&lt;/code&gt; it becomes a source of truth (which should be unique for each piece of data).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; &lt;em&gt;Views are a function of state, not a sequence of events&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Binding&lt;/code&gt; defines a dependency between a property and a source of truth. Passing a binding to a function requires prepending it with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$&lt;/code&gt; character. Sort of like a reference semantics. If the function updates the variable marked as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Binding&lt;/code&gt;, the source of truth is updated as well. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Binding&lt;/code&gt;s can be associated to other &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Binding&lt;/code&gt;s.&lt;/p&gt;

&lt;p&gt;One of the main takeaway messages of SwiftUI is that &lt;strong&gt;controllers are not really necessary anymore&lt;/strong&gt;. In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ÙIKit&lt;/code&gt;, a controller is responsible for keeping views and data in sync and up-to-date. In SwifUI, this task is entirely delegated to the framework.&lt;/p&gt;

&lt;p&gt;SwiftUI manages external state changes by treating external sources of change, such as notifications and timers, as publishers. On the main thread, the app should use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.receive(on)&lt;/code&gt; operator. This operator takes a second parameter, a handler for the event. This operator is associated to the view.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@EnvironmentObject&lt;/code&gt; is a way to encapsulate the model and all of its properties while having binding-like behavior in terms of view update. If one needs to pass around the model through the view hierarchy, it may be more convenient than keeping a set of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@State&lt;/code&gt;s and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Binding&lt;/code&gt;s. If an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@EnvironmentObject&lt;/code&gt; is employed, it can be passed to the view in its initializer.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@BindableObject&lt;/code&gt;s are references to external sources of data, for example, data stored in a database. They are developer-managed (by the publisher mechanism). Data referring to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@BindableObject&lt;/code&gt;should be marked as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ObjectBinding&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;introducing-combine-and-advances-to-foundations&quot;&gt;Introducing Combine and Advances to Foundations&lt;/h1&gt;

&lt;p&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DataProtocol&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[UInt8]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The compression API is now part of Swift. It supports multiple compression algorithms and usage requires just one line of code.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RelativeDataFormatter&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ListFormatter&lt;/code&gt; as ways to format dates and lists in a locale-specific way. The former refers to differences in the way in which dates are represented in different places. The latter refers to the separators and conjunctions to be used to combine a list of items , e.g., “and”, “y” and “と” or “、” vs “,”.&lt;/p&gt;

&lt;p&gt;Operation queue now support barriers to ensure synchronization between tasks. In this manner, one can be sure that there are no pending tasks in the operation queue prior to the execution of an operation. Operation queue also provides functionality for progress reporting.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Combine&lt;/strong&gt;: A new framework for declarative asynchronous programming. Three main concepts: publishers, subscribers, and operators. Unifies the multiple existing approaches for asynchronous programming into a single set of shared, declarative abstractions.&lt;/p&gt;

&lt;p&gt;A single value asynchronously: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Future&lt;/code&gt;.  Multiple values asynchronously: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Publisher&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Zip works similary to functional languages, but it combines data from multiple upstream sources into a single downstream tuple. It handles synchronization in the sense that all the fields of the tuple must be filled in in order for it to procede.&lt;/p&gt;

&lt;p&gt;Combine Latest converts several inputs into a single value. Requires input from any of the upstream sources to proceed. If only one produces a new values, takes the older ones from the other sources and combines it with the lastest.&lt;/p&gt;

&lt;h1 id=&quot;combine-in-practice&quot;&gt;Combine in Practice&lt;/h1&gt;

&lt;p&gt;In Combine, every Publisher describes how they can fail. If the error type is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Never&lt;/code&gt;, that means that the operation cannot fail or that errors are handled earlier in the stream. Multiple operators for handling errors, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assertNoFailure&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;retry&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;catch&lt;/code&gt;, among others. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;catch&lt;/code&gt; can select a recovery publisher to replace the upstream publisher in case an error happens.&lt;/p&gt;

&lt;p&gt;The meaning of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Just&lt;/code&gt; is not clear to me in this case. It is necessary in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;catch&lt;/code&gt; operator because the latter must return a subscriber and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Just&lt;/code&gt; seems to work as a publisher wrapper for data.&lt;/p&gt;

&lt;p&gt;There are also scheduling operators that pertain to ordering, timing (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;timing&lt;/code&gt;)), and pace (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;throttle&lt;/code&gt;) of data delivery.&lt;/p&gt;

&lt;p&gt;Three rules for subscribers:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A subscriber will receive at most a single subscription&lt;/li&gt;
  &lt;li&gt;Followed by one or more values&lt;/li&gt;
  &lt;li&gt;Eneded by at most one completion and the latter will mean that either the publisher has finished or failed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A cancellation terminates a subscription early. Any subscriber that can be cancelled must conform to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cancellable&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Subject&lt;/code&gt;s work as both Publisher and Subscriber. Useful for broadcasts. Subjects may be PassThrough or LastValue. The latter keep a record of the last published events that allows subscribers to catch up on previous events.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Published&lt;/code&gt; annotation can be used to add a publisher to a property.&lt;/p&gt;

&lt;h1 id=&quot;integrating-swiftui&quot;&gt;Integrating SwiftUI&lt;/h1&gt;

&lt;p&gt;This talk is about integrating SwiftUI with existing apps that already use UIKit and organize their data models without accounting for SwiftUI.&lt;/p&gt;

&lt;p&gt;A Hosting Controller is a basic block in integrating SwiftUI. There are UIHostingController, NSHostingController (for AppKit), and WKHostingController. A Hosting Controller brings a SwiftUI view into an existing app built with AppKit or UIKit. There are also HostingViews, embedded a SwiftUI view into the hierarchy of UIKit or AppKit views of an app.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@IBSegueActions&lt;/code&gt; are new to Xcode 11. Avoid the need to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prepare:for:segue&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are protocols for UIKit, AppKit, and WatchKit to wrap existing views into SwiftUI views. These are the Representable protocols, e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UIKitRepresentable&lt;/code&gt;. They include methods for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make&lt;/code&gt;ing a view/controller, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt;ing it, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dismantle&lt;/code&gt;ing it. The latter is optional. For example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;makeUIView&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;updateUIView&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dismantleUIView&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;From what I could understand, a view either comes from UIKit(or AppKit or WatchKit) or from SwiftUI, but not both. They can interact, but the two technologies (event-based and declarative) cannot be mixed in the same view, although they can be part of the same view hierarchy.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BindableObject&lt;/code&gt; has a single property, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;didChange&lt;/code&gt;, through which changes to an existing data model can publish changes to SwiftUI GUIs.&lt;/p&gt;

&lt;h1 id=&quot;improving-battery-life-and-performance&quot;&gt;Improving Battery Life and Performance&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MetricKit&lt;/code&gt; a new framework for collecting metrics about stuff such as battery level and performance counters.&lt;/p&gt;

&lt;p&gt;For &lt;strong&gt;battery&lt;/strong&gt;, some of the available metrics are related to processing, location, display, network, multimedia, camera, accessories. &lt;em&gt;Processing&lt;/em&gt; pertains to CPU and &lt;em&gt;GPU** time. Help find issues such as unexpected rendering and CPU spinners. *Location** metrics quantify accuracy buckets, cumulative usage, background usage. Amoong *Display&lt;/em&gt; metrics, there is one called Average Pixel Luminance. Different pixels colors consume energy differently and lighter colors consume more. &lt;em&gt;Networking&lt;/em&gt; comprise upload and download bytes, connectivity.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CPU metrics&lt;/strong&gt; include, for example, &lt;em&gt;Hanging&lt;/em&gt; metrics, that is, the amount of time that an app spends unresponsive to user requests. They also include &lt;em&gt;disk&lt;/em&gt; and &lt;em&gt;application launch&lt;/em&gt; metrics. There are also &lt;em&gt;memory&lt;/em&gt; metrics, like peak memory, and average suspended memory.&lt;/p&gt;

&lt;p&gt;XCTest can be used to collect a number of metrics during the execution of a test. This is straightforward to use; it is a matter of passing objects that represent the metrics to be collected to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;measure&lt;/code&gt; function in the test function. When  using this, it is useful to not attach  the debugger to the process  and to turn  off every possible analyzer or sanitizer, in order to avoid overhead that may mess up the measurement process. It is possible to set &lt;em&gt;baselines&lt;/em&gt; for these metrics that determine what would be acceptable values for them. Not meeting the baselines means that the test will fail.&lt;/p&gt;

&lt;p&gt;MetricKit can even collect metrics around critical code sections. This functionality leverages &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mxSignPost&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Types from which we wish to collect performance and battery metrics must conform to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MXMetricManagerSubscriber&lt;/code&gt;protocol.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Xcode Metrics Organizer&lt;/strong&gt; (under Window &amp;gt; Organizer) is a data analytics service for MetricsKit. Involves sending collected metrics to Apple. Using this does not require any modification to the app. Provides a neat way, for example, to see which components are consuming more battery during the execution of an app, in terms of the % of user battery consumed per day. It also helps to detect how much of the battery is being consumed in the foreground and how much in the background. This functionality is mainly under the &lt;em&gt;Metrics&lt;/em&gt; and &lt;em&gt;Energy&lt;/em&gt; tabs.&lt;/p&gt;
</description>
        <pubDate>Thu, 06 Jun 2019 19:05:00 +0200</pubDate>
        <link>http://localhost:4000/swift/2019/06/06/wwdc4.html</link>
        <guid isPermaLink="true">http://localhost:4000/swift/2019/06/06/wwdc4.html</guid>
        
        
        <category>swift</category>
        
      </item>
    
  </channel>
</rss>
