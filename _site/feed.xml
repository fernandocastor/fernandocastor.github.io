<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fernando Castor&#39;s rants</title>
    <description>The opinions expressed here are the sole responsibility of the author.
</description>
    <link>http://fernandocastor.github.io/</link>
    <atom:link href="http://fernandocastor.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 28 Oct 2015 15:12:33 -0300</pubDate>
    <lastBuildDate>Wed, 28 Oct 2015 15:12:33 -0300</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>The Most Popular Questions on StackOverflow</title>
        <description>&lt;p&gt;We have conducted a study on the most popular questions about concurrent programming on &lt;a href=&quot;http://www.stackoverflow.com&quot;&gt;StackOverflow&lt;/a&gt;. Our goal with this study was to understand the practical problems faced by software developers when using concurrent programming abstractions. These are the 10 most popular questions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/588866/&quot;&gt;Q588866&lt;/a&gt; “What’s the difference between the atomic and nonatomic attributes?”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/541487/&quot;&gt;Q541487&lt;/a&gt; “‘implements Runnable’ vs. ‘extends Thread’”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/6319146/&quot;&gt;Q6319146&lt;/a&gt; “C++11 introduced a standardized memory model. What does it mean? And how is it going to affect C++ programming?”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/200469/&quot;&gt;Q200469&lt;/a&gt; “What is the difference between a process and a thread”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/661561/&quot;&gt;Q661561&lt;/a&gt; “How to update the GUI from another thread in C#?”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/1036754/&quot;&gt;Q1036754&lt;/a&gt; “Difference between wait() and sleep()”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/62814/&quot;&gt;Q62814&lt;/a&gt; “Difference between binary semaphore and mutex”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/817856/&quot;&gt;Q817856&lt;/a&gt; “When and how should I use a ThreadLocal variable?”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/510632/&quot;&gt;Q510632&lt;/a&gt; “What’s the difference between ConcurrentHashMap and Collections.synchronizedMap(Map)?”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/323972/&quot;&gt;Q323972&lt;/a&gt; “Is there any way to kill a Thread in Python?”&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Among the top 10, we have questions specific to Objective-C (1), Java (2,6,9), C++ (3), C# (5), and Python (10). There are also a couple of questions asking about general concepts (3,7) and one that may be thought of as language specific or not (8). &lt;/p&gt;

&lt;h2 id=&quot;what-are-concurrency-related-questions&quot;&gt;What are concurrency-related questions?&lt;/h2&gt;
&lt;p&gt;We used the same keywords as the well-known &lt;a href=&quot;http://dl.acm.org/citation.cfm?id=1346323&quot;&gt;study&lt;/a&gt; by Shan Lu and colleagues to select the questions based on the tags associated to them: “race(s)”, “deadlock(s)”, “livelock(s)”, “concurrency”, “lock(s)”, “mutex(es)”, “atomic”, “compete(s)”, and “multithreading”.&lt;/p&gt;

&lt;p&gt;This produced a list with more than 22000 questions. We then ranked them by popularity, extracted only the 250 most popular, and manually inspected those to ascertain that they were actually concurrency-related. We ended up with 231 questions.&lt;/p&gt;

&lt;h2 id=&quot;how-did-we-measure-popularity&quot;&gt;How did we measure popularity?&lt;/h2&gt;
&lt;p&gt;To calculate the popularity of each question, we obtained, for each one: (i) number of up-votes; (ii) number of times the question is marked as favorite; (iii) number of views; (iv) number of comments; and (v) and number of answers. Each of these metrics was then normalized with respect to the average value considering all the questions in StackOverflow. The &lt;strong&gt;P&lt;/strong&gt; popularity measure is the result of calculating the geometric mean of these normalized metrics.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Most of the questions pertained to either Java (77) or C# (60). Also, 28 pertained to mobile computing, focusing on one of the most popular platforms: iOS (6), Android (7), and Windows Phone (15).&lt;/p&gt;

&lt;p&gt;We classified the questions in terms of 7 categories:  &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Theoretical Concepts (59)
    &lt;ul&gt;
      &lt;li&gt;Q34510 “What is a race condition?”&lt;/li&gt;
      &lt;li&gt;Q588866 “What’s the difference between the atomic and nonatomic attributes?”&lt;/li&gt;
      &lt;li&gt;Q200469 “What is the difference between a process and a thread?”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Practical Concepts  (51)
    &lt;ul&gt;
      &lt;li&gt;Q817856 “When and how should I use a ThreadLocal variable?”&lt;/li&gt;
      &lt;li&gt;Q154551 “Which [synchronization] approach should be used [to increment an int]?”&lt;/li&gt;
      &lt;li&gt;Q251391 “Why is lock(this) {. . . } bad?”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;First Steps (29)
    &lt;ul&gt;
      &lt;li&gt;Q2846653 “Trying to find a simple example that clearly shows a single task being divided for multi-threading.”&lt;/li&gt;
      &lt;li&gt;Q3360555 “How to pass parameters to ThreadStart method in Thread?”&lt;/li&gt;
      &lt;li&gt;Q2734025 “Is javascript guaranteed to be single-threaded?”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Thread Life-Cycle (18)
    &lt;ul&gt;
      &lt;li&gt;Q1520887 “How to pause / sleep thread or process in Android?”&lt;/li&gt;
      &lt;li&gt;Q323972 “Is there any way to kill a Thread in Python?”&lt;/li&gt;
      &lt;li&gt;Q289434 “How to make a Java thread wait for another thread’s output?”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Technical Problems (53)
    &lt;ul&gt;
      &lt;li&gt;Q661561 “How to update the GUI from another thread in C#?”&lt;/li&gt;
      &lt;li&gt;Q530211 “[How to] create a blocking Queue&lt;t&gt; in .NET?&quot;&lt;/t&gt;&lt;/li&gt;
      &lt;li&gt;Q16159203 “Why does this Java program terminate despite that apparently it shouldn’t (and didn’t)?”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Concurrent Lib/Framework (15 Q)
    &lt;ul&gt;
      &lt;li&gt;Q3629784 “How is Node.js inherently faster when it still relies on Threads internally?”&lt;/li&gt;
      &lt;li&gt;Q6916385 “Is there a concurrent List in Java’s JDK?”&lt;/li&gt;
      &lt;li&gt;Q3847108 “What is the Haskell response to Node.js?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Correctness (10 Q)
    &lt;ul&gt;
      &lt;li&gt;Q9666 “Is accessing a variable in C# an atomic operation?”&lt;/li&gt;
      &lt;li&gt;Q7095 “Is the C# constructor thread safe?”&lt;/li&gt;
      &lt;li&gt;Q680097 “I’ve heard i++ isn’t thread safe, is ++i thread-safe?”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Among all the questions, only one pertained to GPUs and not a single one asked specifically about improving performance, which is surprising. I could say that we learned three main things from this study: &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Developers do not understand the problems that existing tools report about concurrency errors, because they often do not understand the errors themselves. Error reports that provide actual code examples have a stronger potential to be useful (see the third point below)&lt;/li&gt;
  &lt;li&gt;Tools that help developers to build the software right, instead of trying to right the system after it’s built are useful. For example, a simple tool that indicates to developers which parts of the code execute atomically is straightforward to build and could be easily integrated into existing IDEs&lt;/li&gt;
  &lt;li&gt;Developers want examples, both minimal examples of things that work correctly and minimal examples of code that help them understand concurrency problems. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more information, take a look at our &lt;a href=&quot;http://gustavopinto.org/lost+found/plateau2015.pdf&quot;&gt;paper&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 28 Oct 2015 08:39:06 -0300</pubDate>
        <link>http://fernandocastor.github.io/mining/software/repositories,/stackoverflow,/concurrency/2015/10/28/the-most-popular-questions-on-stackoverflow.html</link>
        <guid isPermaLink="true">http://fernandocastor.github.io/mining/software/repositories,/stackoverflow,/concurrency/2015/10/28/the-most-popular-questions-on-stackoverflow.html</guid>
        
        
        <category>mining</category>
        
        <category>software</category>
        
        <category>repositories,</category>
        
        <category>stackoverflow,</category>
        
        <category>concurrency</category>
        
      </item>
    
      <item>
        <title>Haskell one-liner</title>
        <description>&lt;p&gt;One of these days, &lt;a href=&quot;http://www.twitter.com/1haskelladay&quot;&gt;@1HaskellADay&lt;/a&gt; posted the following programming challenge: &lt;/p&gt;

&lt;p&gt;&lt;em&gt;#1Liner You’re given either fst or snd, but don’t know which. Define a function that returns its dual: dual :: ((a,a) -&amp;gt; a) -&amp;gt; ((a,a) -&amp;gt; a)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;My answer to the challenge was fairly straightforward: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;dual&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It’s not bad, but nothing compared to &lt;a href=&quot;http://www.twitter.com/frsoares&quot;&gt;Francisco Soares&lt;/a&gt;’ &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;dual&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uncurry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curry&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is how real Haskell programmers do it. Those that &lt;a href=&quot;http://www.bernstein-plus-sons.com/RPDEQ.html&quot; title=&quot;Real programmers don&#39;t eat quiche&quot;&gt;do not eat quiche&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 26 Oct 2015 08:39:06 -0300</pubDate>
        <link>http://fernandocastor.github.io/general/2015/10/26/haskell-one-liner.html</link>
        <guid isPermaLink="true">http://fernandocastor.github.io/general/2015/10/26/haskell-one-liner.html</guid>
        
        
        <category>general</category>
        
      </item>
    
  </channel>
</rss>
